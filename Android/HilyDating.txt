Platform: Android
Package Name: com.hily.app
Package Version Name: 2.9.3.2
Package Version Code: 160
Min Sdk: 16
Target Sdk: 28
MD5   : 1ef443b86e2e6f2091aa9cfdcbe86364
SHA1  : e24a93c8981f1918239e45b7444a0c627e207f17
SHA256: 401311c908ba58cbbb32758e7892fb0fb84cffc849d55b8476c27351b1a3b687
SHA512: 852cf81762e6c7ea7d73a4698d41ce9e9565a6aba9af5b8d82fd4d5f589d8aee3173dbd48f77bf5915d216b8b1a432a28bf626309d58e179423b1e7fcb08f210
Analyze Signature: 2827bc428ae2d40c4daede42f63f3998f65a51a281bec1477a56fd448c4ff3396f882583550c59c90ac1c60e7030098357e1b1a4c72afa6192f3a2facc062d8a
------------------------------------------------------------------------------------------------
[Critical] <Command> Runtime Command Checking:
           This app is using critical function 'Runtime.getRuntime().exec("...")'.
           Please confirm these following code secions are not harmful:
               => Lcom/appsee/yd;->k()V (0x14) ---> Ljava/lang/Runtime;->exec(Ljava/lang/String;)Ljava/lang/Process;
[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
           Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.hily.app.data.fcm.CustomFirebaseMessagingService
               => com.hily.app.data.fcm.CustomInstanceIDListenerService
               => com.google.firebase.messaging.FirebaseMessagingService
               => com.google.firebase.iid.FirebaseInstanceIdService
[Critical]  AndroidManifest ContentProvider Exported Checking:
           We strongly suggest you explicitly specify the "exported" attribute (AndroidManifest.xml).
           For Android "android:targetSdkVersion" < 17, the exported value of ContentProvider is "true" by default.
           For Android "android:targetSdkVersion" >= 17, the exported value of ContentProvider is "false" by default.
           Which means if you do not explicitly set the "android:exported", you will expose your ContentProvider to Android < 4.2 devices.
           Even if you set the provider the permission with [protectionalLevel="normal"], other apps still cannot access it on Android >=
           4.2 devices because of the default constraint.
           Please make sure to set exported to "true" if you initially want other apps to use it (including protected by "signature"
           protectionalLevel), and set to "false" if your do not want to.
           Please still specify the "exported" to "true" if you have already set the corresponding "permission", "writePermission" or
           "readPermission" to "signature" protectionLevel or higher
           because other apps signed by the same signature in Android >= 4.2 devices cannot access it.
           Reference: http://developer.android.com/guide/topics/manifest/provider-element.html#exported
           Vulnerable ContentProvider Case Example:
             (1)https://www.nowsecure.com/mobile-security/ebay-android-content-provider-injection-vulnerability.html
             (2)http://blog.trustlook.com/2013/10/23/ebay-android-content-provider-information-disclosure-vulnerability/
             (3)http://www.wooyun.org/bugs/wooyun-2010-039169
                 provider => com.raizlabs.android.dbflow.runtime.StubContentProvider
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:4):
               http://%s:%d/%s
                   => Lcom/facebook/ads/internal/v/b/f;->d(Ljava/lang/String;)Ljava/lang/String;
               http://play.google.com/store/apps/
                   => Lcom/facebook/ads/internal/w/e/g;->a(Landroid/content/Context; Landroid/net/Uri;)V
               http://play.google.com/store/apps/details?id=com.facebook.orca
                   => Lcom/facebook/messenger/MessengerUtils;->openMessengerInPlayStore(Landroid/content/Context;)V
               http://www.facebook.com
                   => Lcom/facebook/ads/internal/view/b/a;-><clinit>()V
[Critical] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           Found a critical WebView "addJavascriptInterface" vulnerability. This method can be used to allow JavaScript to control the host
           application.
           This is a powerful feature, but also presents a security risk for applications targeted to API level JELLY_BEAN(4.2) or below,
           because JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing
           untrusted content could allow an attacker to manipulate the host application in unintended ways, executing Java code with the
           permissions of the host application.
           Reference:
             1."http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
           java.lang.String) "
             2.https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
             3.http://50.56.33.56/blog/?p=314
             4.http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-vulnerability/
           Please modify the below code:
               => Lcom/facebook/ads/internal/view/c/a;-><init>(Landroid/content/Context; Ljava/lang/ref/WeakReference; I)V (0x10c) --->
                    Lcom/facebook/ads/internal/view/c/a;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/facebook/ads/internal/view/f/b;->g()V (0x2ec) --->
                    Lcom/facebook/ads/internal/view/c/a;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lcom/appsee/Appsee;->installJavascriptInterface(Landroid/webkit/WebView;)V (0x20) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task; (0x56) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Lcom/facebook/ads/internal/v/b/o;->a(Landroid/content/Context; Z)Ljava/io/File; (0x2c) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/internal/Utility;->refreshAvailableExternalStorage()V (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/internal/Utility;->refreshTotalExternalStorage()V (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/stetho/dumpapp/plugins/FilesDumperPlugin;->resolvePossibleSdcardPath(Ljava/lang/String;)Ljava/io/File;
                    (0x20) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                 activity => com.hily.app.presentation.ui.activities.main.MainActivity
                  service => com.hily.app.data.fcm.CustomFirebaseMessagingService
                  service => com.hily.app.data.fcm.CustomInstanceIDListenerService
                  service => com.google.firebase.messaging.FirebaseMessagingService
                  service => com.google.firebase.iid.FirebaseInstanceIdService
[Warning] <Sensitive_Information> Getting ANDROID_ID:
           This app has code getting the 64-bit number "Settings.Secure.ANDROID_ID".
           ANDROID_ID seems a good choice for a unique device identifier. There are downsides: First, it is not 100% reliable on releases of
           Android prior to 2.2 (Froyo).
           Also, there has been at least one widely-observed bug in a popular handset from a major manufacturer, where every instance has
           the same ANDROID_ID.
           If you want to get an unique id for the device, we suggest you use "Installation" framework in the following article.
           Please check the reference: http://android-developers.blogspot.tw/2011/03/identifying-app-installations.html
               => Lcom/appsflyer/AppsFlyerLib;->Ë(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Z Landroid/content/SharedPreferences; Z Landroid/content/Intent; Ljava/lang/String;)Ljava/util/Map;
                    (0xca6) ---> Landroid/provider/Settings$Secure;->getString(Landroid/content/ContentResolver;
                    Ljava/lang/String;)Ljava/lang/String;
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task;
               Lcom/facebook/ads/internal/adapters/c/a$a;->a(Z)V
               Lcom/facebook/ads/internal/n/d;->b(Landroid/content/Context; Z)Ljava/lang/String;
               Lcom/facebook/ads/internal/view/c/a;-><init>(Landroid/content/Context; Ljava/lang/ref/WeakReference; I)V
               Lcom/facebook/ads/internal/view/f/b;->g()V
               Lcom/facebook/ads/internal/w/e/a;-><init>(Landroid/content/Context;)V
               Lcom/facebook/internal/WebDialog;->setUpWebView(I)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/facebook/ads/internal/w/e/a;-><init>(Landroid/content/Context;)V (0x78) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lcom/facebook/internal/WebDialog;->setUpWebView(I)V (0x62) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task; (0x2a) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Command> Executing "root" or System Privilege Checking:
           The app may has the code checking for "root" permission, mounting filesystem operations or monitoring system:
               Lcom/facebook/ads/internal/w/b/f;->a()Lcom/facebook/ads/internal/w/b/f$a;  => 'su'
               Lcom/facebook/stetho/dumpapp/plugins/CrashDumperPlugin;->doKill(Lcom/facebook/stetho/dumpapp/DumperContext;
                    Ljava/util/Iterator;)V  => '/system/bin/kill'
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Landroid/arch/persistence/db/SupportSQLiteOpenHelper$Callback;->deleteDatabaseFile(Ljava/lang/String;)V (0x7a) --->
                    Ljava/io/File;->delete()Z
               => Lcom/appsee/yg;->k(Ljava/io/File;)V (0x46) ---> Ljava/io/File;->delete()Z
               => Lcom/appsflyer/cache/CacheManager;->deleteRequest(Ljava/lang/String; Landroid/content/Context;)V (0x5c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/appsflyer/r;->Ë(Ljava/lang/ref/WeakReference;)Ljava/lang/String; (0x106) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->deleteIfExists(Ljava/io/File;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->open(Ljava/io/File; I I J)Lcom/bumptech/glide/disklrucache/DiskLruCache;
                    (0x44) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->rebuildJournal()V (0x198) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->remove(Ljava/lang/String;)Z (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/Util;->deleteContents(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsController;->deleteSessionPartFilesFor(Ljava/lang/String;)V (0x14) --->
                    Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsController;->recursiveDelete(Ljava/io/File;)V (0x2c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsController;->retainSessions([Ljava/io/File; Ljava/util/Set;)V (0x60) --->
                    Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsController;->retainSessions([Ljava/io/File; Ljava/util/Set;)V (0xb2) --->
                    Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsController;->doCleanInvalidTempFiles([Ljava/io/File;)V (0x12a) --->
                    Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/CrashlyticsFileMarker;->remove()Z (0x8) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/LogFileManager;->discardOldLogFiles(Ljava/util/Set;)V (0x38) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/Utils;->capFileCount(Ljava/io/File; Ljava/io/FilenameFilter; I Ljava/util/Comparator;)I
                    (0x28) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/ads/internal/k/e;->a(Lcom/facebook/ads/internal/k/d; Landroid/content/Context;)V (0x58) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/ads/internal/k/e;->b(Landroid/content/Context;)V (0x30) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/ads/internal/u/c;->a(Ljava/lang/String;)V (0xe0) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0x54) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0x9c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0xce) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0xfc) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->saveEventsToDisk(Lcom/facebook/appevents/PersistedEvents;)V (0x66) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$2;->run()V (0x10) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$BufferFile;->deleteAll(Ljava/io/File;)V (0x20) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->renameToTargetAndTrim(Ljava/lang/String; Ljava/io/File;)V (0x22) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->trim()V (0x19a) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->openPutStream(Ljava/lang/String; Ljava/lang/String;)Ljava/io/OutputStream; (0xc)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/NativeAppCallAttachmentStore;->addAttachments(Ljava/util/Collection;)V (0x110) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/Utility;->deleteDirectory(Ljava/io/File;)V (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/stetho/inspector/network/ResponseBodyFileManager;->cleanupFiles()V (0x38) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/InvalidSessionReport;->remove()V (0x4c) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/NativeSessionReport;->remove()V (0x50) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/NativeSessionReport;->remove()V (0x98) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/QueueFileLogStore;->deleteLogFile()V (0xa) ---> Ljava/io/File;->delete()Z
               => Lcom/crashlytics/android/core/SessionReport;->remove()V (0x44) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/ads/internal/v/b/a/e;->a(Lcom/facebook/ads/internal/v/b/a/e; Ljava/io/File;)V (0x34) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/ads/internal/v/b/a/e;->a(Ljava/util/List;)V (0x6c) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$1;->onClose()V (0x24) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/stetho/dumpapp/plugins/HprofDumperPlugin;->handlePipeOutput(Ljava/io/OutputStream;)V (0x40) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/stetho/dumpapp/plugins/HprofDumperPlugin;->handlePipeOutput(Ljava/io/OutputStream;)V (0x98) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/stetho/dumpapp/plugins/HprofDumperPlugin;->truncateAndDeleteFile(Ljava/io/File;)V (0x10) --->
                    Ljava/io/File;->delete()Z
[Notice] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Found codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml:
               => Lcom/facebook/ads/internal/b/e;->a (Landroid/content/Context;)Lcom/facebook/ads/AdSettings$IntegrationErrorMode;
               => Lcom/google/android/gms/common/GoogleSignatureVerifier;->zza (Ljava/lang/String; I)Lcom/google/android/gms/common/zzm;
               => Lcom/google/android/gms/common/GoogleSignatureVerifier;->zzc (Ljava/lang/String;)Lcom/google/android/gms/common/zzm;
[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/facebook/ads/internal/l/b;->e()Ljava/lang/String; (0x24) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/facebook/ads/internal/u/c$1;->run()V (0x136) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/facebook/internal/AttributionIdentifiers;->getInstallerPackageName(Landroid/content/Context;)Ljava/lang/String;
                    (0x14) ---> Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/appsflyer/AppsFlyerLib;->Ë(Landroid/content/Context; Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Ljava/lang/String; Z Landroid/content/SharedPreferences; Z Landroid/content/Intent; Ljava/lang/String;)Ljava/util/Map;
                    (0x5be) ---> Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
[Notice] <KeyStore><Hacker> KeyStore File Location:
           BKS Keystore file:
               com/google/api/client/googleapis/google.jks
[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Lcom/facebook/FacebookSdk;->getApplicationSignature(Landroid/content/Context;)Ljava/lang/String; (0x28) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/facebook/ads/internal/w/b/f;->a(Landroid/content/Context;)Ljava/lang/String; (0x1e) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/facebook/internal/FacebookSignatureValidator;->validateSignature(Landroid/content/Context; Ljava/lang/String;)Z
                    (0x3a) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.facebook.CustomTabActivity
                 activity => com.hily.app.presentation.ui.activities.location.LocationActivity
                 activity => com.snapchat.kit.sdk.SnapKitActivity
                 receiver => io.branch.referral.InstallListener
                 receiver => com.hily.app.data.util.InternetStateReceiver
                 receiver => com.appsflyer.MultipleInstallBroadcastReceiver
                 receiver => androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryChargingProxy
                 receiver => androidx.work.impl.background.systemalarm.ConstraintProxy$BatteryNotLowProxy
                 receiver => androidx.work.impl.background.systemalarm.ConstraintProxy$StorageNotLowProxy
                 receiver => androidx.work.impl.background.systemalarm.ConstraintProxy$NetworkStateProxy
                 receiver => androidx.work.impl.background.systemalarm.RescheduleReceiver
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info]  AndroidManifest "intent-filter" Settings Checking:
           "intent-filter" of AndroidManifest.xml check OK.
[Info]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           No default or "normal" protection level customized permission found (AndroidManifest.xml).
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
